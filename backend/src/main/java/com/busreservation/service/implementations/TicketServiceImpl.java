package com.busreservation.service.implementations;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Optional;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.busreservation.model.Booking;
import com.busreservation.model.Ticket;
import com.busreservation.repository.BookingRepository;
import com.busreservation.repository.TicketRepository;
import com.busreservation.service.TicketService;

@Service
@Transactional
public class TicketServiceImpl implements TicketService {

    private final TicketRepository ticketRepository;
    private final BookingRepository bookingRepository;

    public TicketServiceImpl(TicketRepository ticketRepository, BookingRepository bookingRepository) {
        this.ticketRepository = ticketRepository;
        this.bookingRepository = bookingRepository;
    }

    @Override
    public Optional<Ticket> generateTicket(Long bookingId) throws IOException {
        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new IllegalArgumentException("Booking not found: " + bookingId));

        // build Ticket entity (set createdAt as LocalDateTime)
        Ticket t = new Ticket();
        t.setBooking(booking);
        t.setTicketNumber("TICKET-" + System.currentTimeMillis());
        t.setCreatedAt(LocalDateTime.now());

        Ticket saved = ticketRepository.save(t);
        return Optional.of(saved);
    }

    @Override
    public Optional<Ticket> getTicket(Long id) {
        return ticketRepository.findById(id);
    }

    @Override
    public byte[] downloadTicketPdf(Long ticketId) throws IOException {
        // For now return a minimal PDF bytes or generated bytes.
        // The actual PDF generation is outside scope here; this stub returns ticket number bytes.
        Ticket ticket = ticketRepository.findById(ticketId)
                .orElseThrow(() -> new IllegalArgumentException("Ticket not found: " + ticketId));
        String pdfText = "Ticket: " + ticket.getTicketNumber();
        return pdfText.getBytes(); // simple fallback; replace with real PDF generator (PDFBox)
    }
}